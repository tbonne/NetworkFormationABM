package networkFormation;

import java.util.ArrayList;

import org.rosuda.REngine.REXP;
import org.rosuda.REngine.RList;
import org.rosuda.REngine.Rserve.RConnection;
import org.rosuda.REngine.Rserve.RserveException;

public class NetStats {

	public static void calculateCosineSimilarity(Node offspring, Node mother){

		ArrayList<Integer> offspring_partners ;
		ArrayList<Integer> mother_partners ;

		for(Node node: ModelSetup.getNodes()){

			if(node!=offspring && node!=mother){

				//for offspring
				if(offspring.myNeigh.contains(node)){
					offspring_partners.add(1);
				} else {
					offspring_partners.add(0);
				}

				//for mother
				if(mother.myNeigh.contains(node)){
					mother_partners.add(1);
				} else {
					mother_partners.add(0);
				}
			}

		}


		//convert arrayList to array
		int[] offspringArray = new int[offspring_partners.size()];
		int[] motherArray = new int[mother_partners.size()];
		for(int j=0;j<offspring_partners.size();j++){
			offspringArray[j]=offspring_partners.get(j);
		}
		for(int j=0;j<mother_partners.size();j++){
			motherArray[j]=mother_partners.get(j);
		}


		try {
			//System.out.println("Attempting to use R");
			REXP cosineX,x2;
			RList l;
			RConnection c = new RConnection();
			//System.out.println("Connection set");
			c.eval("library(igraph)");
			c.eval("library(lsa)");
			//System.out.println("Library loaded");


			//caculate in R the distance D from the observed distributions
			c.assign("offP", offspringArray);
			c.assign("motherP", motherArray);
			c.eval("cosSim <- cosine(offP,motherP)");
			cosineX = c.eval("cosSim[1]");
			double cos = cosineX.asDouble();


			System.out.println("infected = "+prevCount+" intensity = "+avgInten+"  %="+avgInten/prevCount*(double)sampleSize);

		}catch (RserveException r){
			r.printStackTrace();
			System.out.println("Failed to estimate k aggregation");
			dist_abun=99999999;
			dist_int=99999999;
		}

		try{
			//estimate r naught for abundance of infections
			int[] abun = convertIntegers(prevelence);
			c.assign("abun", abun);
			//System.out.println("assigning abundance data to R");
			c.eval("library(grofit)");
			//System.out.println("Library loaded");
			c.eval("days <- 1:length(abun)");
			c.eval("fit <- gcFitSpline(days,abun)");
			x = c.eval("summary(fit)[1]");
			l = x.asList();
			double slopeA = l.at(0).asDouble();
			//System.out.println("mu = "+slopeA + " this is r0 for abundance");
			r_naught_abundance = slopeA;

		}catch (RserveException r){
			r.printStackTrace();
			System.out.println("Failed to estimate R naught for the abundance data");
			r_naught_abundance=0;
		}

		/*	try{


				//estimate r naught for growth of larvae
				double[] la = convertLongToDouble(cellsInfected);
				c.assign("la", la);
				//System.out.println("assigning infection data to R");
				c.eval("library(grofit)");
				//System.out.println("Library loaded");
				c.eval("days <- 1:length(la)");
				c.eval("fit <- gcFitSpline(days,la)");
				x = c.eval("summary(fit)[1]");
				l = x.asList();
				double slopeA = l.at(0).asDouble();
				//System.out.println("mu = "+slopeA +" for larvae growth");
				r_naught_larvae = slopeA;

			}catch (RserveException r){
				r.printStackTrace();
				System.out.println("Failed to estimate R naught for larvae growth");
				r_naught_larvae=0;r_naught_larvae=0;
			}
		 */
		c.close();


	}catch (Exception e){
		System.out.println("EX:"+e);
		e.printStackTrace();
	}



}

}
