package networkFormation;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.collections.IteratorUtils;

import repast.simphony.space.graph.Network;

public class Executor {

	public static void removeOneIndividual(){
		
	}
	
	public static void addNewIndividual(){
		
		//choose random mother
		Node mother = (Node) ModelSetup.getContext().getRandomObject();
		
		//create new id
		Node newID = new Node();
		ModelSetup.getContext().add(newID);
		ModelSetup.addNode(newID);
		
		//create ties
		createTies(newID, mother);
		
		
	}
	
	private static void createTies(Node offspring, Node mother){
		
		Network net = ModelSetup.getNetwork();
		Iterable<Node> motherP = net.getAdjacent(mother);
		List<Node> motherPartners = IteratorUtils.toList(motherPartners.iterator());
		 
		for(Node node:ModelSetup.getNodes()){

			if(node.equals(offspring)==false){
				if(node.equals(mother)){
					net.addEdge(offspring, mother);
				} else {
					if()
				}
			}
		}
		
	}
	
	public static void age(){
		//nothing now
	}
	
}
